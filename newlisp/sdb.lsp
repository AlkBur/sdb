; TODO: add support for CAS

(context 'sdb)

(if (= ostype "OSX")
	(constant 'SDBLIB "/usr/lib/libsdb.dylib") ; osx
	(constant 'SDBLIB "/usr/lib/libsdb.so") ; linux
)

(import SDBLIB "sdb_new")
(import SDBLIB "sdb_set")
(import SDBLIB "sdb_get")
(import SDBLIB "sdb_sync")
(import SDBLIB "sdb_free")
(import SDBLIB "sdb_json_get")
(import SDBLIB "sdb_json_set")
(import SDBLIB "sdb_json_indent")
(import SDBLIB "sdb_json_unindent")

(define (sdb:new file lock)
	(sdb_new file lock))
(define (sdb:set db var val)
	(sdb_set db var val 0))
(define (sdb:add db var val)
	(sdb_add db var val))
(define (sdb:inc db var val)
	(sdb_inc db var val 0))
(define (sdb:dec db var val)
	(sdb_dec db var val 0))
(define (sdb:get db var)
	(let (ret (sdb_get db var nil))
		(if (= 0 ret) "" (get-string ret))))
(define (sdb:free db)
	(sdb_free db))
(define (sdb:sync db)
	(sdb_sync db))
(define (sdb:json_get db key path)
	; (set 'stats (dup "\000" 8))
	(let (ret (sdb_json_get db key path stats))
		(if (= 0 ret) "" (get-string ret))))
(define (sdb:json_set db key path value)
	(sdb_json_set db key path value nil))
(define (sdb:json_indent js)
	(let (ret (sdb_json_indent js))
		(if (= 0 ret) "" (get-string ret))))
(define (sdb:json_unindent js)
	(let (ret (sdb_json_unindent js))
		(if (= 0 ret) "" (get-string ret))))

(context 'MAIN)
