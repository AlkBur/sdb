TODO
----
* support for arrays/lists
  - we need them!.. what about using json?
  s.json_get ("obj", "foo[0]");
* use stdin if database name is '-' ??
* Add api and syntax for json_length()
* Add query api sdb_query ("") - for running command prompts
* Add comparision stuff
* Add 'cas' api for non-memcache?
* Add support for socket file for memcached api
* incr returns char * in mcsdb and ut64 in sdb api? looks wrong!
* add api to create db without caching it before
* remove buffer

Syncronization
--------------
 - each key/value have a timestamp of creation/modification
 - sdb_diff() must check both databases and look for removed entries
 - syncronization between hosts - realtime storage
 - run sync every N seconds? every N keys in cache?
 - sdb_log to dump to a file descriptor all sets.. as a stream

Optimization
------------
* remove endian conversions
* use slices instead of mallocs
* implement udp protocol for memcache
* rewrite mcsdb in luvit
* use 16 bit key and 16 bit value
* use kernel's linked list? it should be faster..

BUGS
----
* hashtable is not cleaned up when sync
  - must honor expire time entries
* key and value boundaries are probably not properly handled
